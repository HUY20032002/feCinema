import React, { useState } from "react";
import { createMovie } from "../../../api/movieRequest";
import { useDispatch } from "react-redux";
import Select from "react-select";

function CreateMovieModal({ show, onClose, success }) {
  if (!show) return null;
  const dispatch = useDispatch();
  const [selectedImage, setSelectedImage] = useState(null);
  const [selectedGenres, setSelectedGenres] = useState([]);
  const [formData, setFormData] = useState({
    img: "",
    name: "",
    description: "",
    genre: selectedGenres,
    duration: "",
    subtitle: [],
    format: [],
    releaseDate: "",
    ageRating: "",
    trailerUrl: "",
  });

  const formatOptions = ["2D", "3D", "IMAX"];

  const genres = [
    "H√†nh ƒê·ªông",
    "Ho·∫°t H√¨nh",
    "Kinh D·ªã",
    "Gia ƒê√¨nh",
    "H√¨nh S·ª±",
    "Chi·∫øn Tranh",
    "Bi K·ªãch",
    "C·ªï Trang",
    "Phi√™u L∆∞u",
    "Vi·ªÖn T∆∞·ªüng",
    "T√¨nh C·∫£m",
    "H√†i H∆∞·ªõc",
    "T√¢m L√Ω",
    "Th·ªÉ Thao",
    "√Çm Nh·∫°c",
    "Trinh Th√°m",
  ];
  const subtitleOptions = ["VietSub", "Thuy·∫øt Minh", "EngSub"];

  // üëâ ch·ªâ d√†nh cho input text/number
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  // üëâ d√†nh cho file ·∫£nh
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.readAsDataURL(file); // convert sang base64
    reader.onloadend = () => {
      setFormData((prev) => ({ ...prev, img: reader.result })); // g·ª≠i l√™n BE
      setSelectedImage(reader.result); // ‚úÖ th√™m d√≤ng n√†y ƒë·ªÉ hi·ªán preview
    };
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createMovie(dispatch, formData); // ‚úÖ ch·ªù API xong
      success(); // load l·∫°i
      onClose(); // r·ªìi ƒë√≥ng modal
    } catch (error) {
      console.log("ER: ", error);
    }
  };

  const handleFormatChange = (e) => {
    const { value, checked } = e.target;
    setFormData((prev) => {
      const newFormats = checked
        ? [...prev.format, value]
        : prev.format.filter((f) => f !== value);
      return { ...prev, format: newFormats };
    });
  };
  const handleSubtitleChange = (e) => {
    const { value, checked } = e.target;
    if (checked) {
      // tick ‚Üí th√™m v√†o m·∫£ng
      setFormData((prev) => ({
        ...prev,
        subtitle: [...prev.subtitle, value],
      }));
    } else {
      // b·ªè tick ‚Üí x√≥a kh·ªèi m·∫£ng
      setFormData((prev) => ({
        ...prev,
        subtitle: prev.subtitle.filter((s) => s !== value),
      }));
    }
  };

  return (
    <div
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 p-4"
      role="dialog"
      aria-modal="true"
      onClick={onClose}
    >
      <div
        className="relative w-full max-w-3xl rounded-2xl bg-white shadow-2xl p-6 animate-fadeIn"
        onClick={(e) => e.stopPropagation()}
      >
        {/* N√∫t ƒë√≥ng ‚ùå */}
        <button
          onClick={onClose}
          className="absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-2xl cursor-pointer"
        >
          &times;
        </button>

        <h2 className="text-xl font-bold mb-4">Th√™m phim m·ªõi</h2>

        <div className="grid grid-cols-1 lg:grid-cols-2">
          {/* ·∫¢nh poster */}
          <div className="h-[400px] lg:h-[100%]">
            <input type="file" accept="image/*" onChange={handleFileChange} />
            {selectedImage && (
              <div style={{ marginTop: "10px" }}>
                <img
                  src={selectedImage}
                  alt="preview"
                  className="w-full h-full object-cover"
                />
              </div>
            )}
          </div>

          {/* Th√¥ng tin phim */}
          <div className="p-6 flex flex-col space-y-3">
            <label htmlFor="">T√™n Phim</label>
            <input
              id="modalTitle"
              type="text"
              name="name" // üëà th√™m name
              className="text-xl text-gray-900 border-4 rounded-sm"
              value={formData.name}
              onChange={handleInputChange} // üëà th√™m onChange
            />
            <label htmlFor="" className="text-xl">
              M√¥ t·∫£
            </label>
            <textarea
              type="text"
              name="description" // üëà th√™m name
              className="text-gray-700 text-xl rounded-sm border-4"
              value={formData.description}
              onChange={handleInputChange} // üëà th√™m onChange
            />
            <div>
              <h2 className="text-xl font-bold">Ch·ªçn th·ªÉ lo·∫°i</h2>
              <Select
                isMulti
                options={genres.map((g) => ({ value: g, label: g }))}
                value={genres
                  .map((g) => ({ value: g, label: g }))
                  .filter((g) => selectedGenres.includes(g.value))}
                onChange={(selected) =>
                  setSelectedGenres(selected.map((s) => s.value))
                }
                className="w-full"
              />
            </div>
            <div className="grid grid-cols-2 gap-3 text-sm text-gray-800">
              <div className="flex items-center gap-1">
                <span className="font-medium">ƒê·ªô tu·ªïi:</span>{" "}
                <input
                  type="number" // üëà ch·ªâ cho ph√©p s·ªë
                  name="ageRating"
                  value={formData.ageRating}
                  onChange={handleInputChange}
                  className="border rounded px-1 w-16"
                  min="0"
                />
                +
              </div>

              <div>
                <span className="font-medium">Th·ªùi l∆∞·ª£ng:</span>{" "}
                <input
                  type="number" // üëà ch·ªâ cho ph√©p s·ªë
                  name="duration"
                  value={formData.duration}
                  onChange={handleInputChange}
                  className="border rounded px-1 w-16"
                  min="0"
                />
                ph√∫t
              </div>

              <div>
                <span className="font-medium">Ch·ªçn ƒë·ªãnh d·∫°ng</span>
                <div className="flex flex-wrap gap-3">
                  {formatOptions.map((item) => (
                    <label key={item} className="flex items-center gap-2">
                      <input
                        type="checkbox"
                        value={item}
                        checked={formData.format.includes(item)}
                        onChange={handleFormatChange}
                      />
                      {item}
                    </label>
                  ))}
                </div>
              </div>

              <div>
                <span className="font-medium">Ph·ª• ƒë·ªÅ: </span>{" "}
                <div className="flex flex-wrap gap-3">
                  {subtitleOptions.map((item) => (
                    <label key={item} className="flex items-center gap-2">
                      <input
                        type="checkbox"
                        value={item}
                        checked={formData.subtitle.includes(item)}
                        onChange={handleSubtitleChange}
                      />
                      {item}
                    </label>
                  ))}
                </div>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <span className="font-medium">Ng√†y ph√°t h√†nh:</span>
              <input
                type="date"
                name="releaseDate"
                value={formData.releaseDate}
                onChange={handleInputChange}
                className="border rounded px-2 py-1 text-sm"
              />
            </div>
            <div className="flex items-center gap-2">
              <span className="font-medium">Trailer:</span>
              <input
                type="text"
                name="trailerUrl"
                value={formData.trailerUrl}
                onChange={handleInputChange}
                className="border rounded px-2 py-1 text-sm"
              />
            </div>
          </div>
        </div>
        <div className="flex flex-col md:flex-row  justify-end">
          <button
            type="submit"
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 w-full mt-2 mr-2"
            onClick={handleSubmit}
          >
            Th√™m phim
          </button>
          <button
            type="submit"
            className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 w-full mt-2"
            onClick={onClose}
          >
            ƒê√≥ng
          </button>
        </div>
      </div>
    </div>
  );
}

export default CreateMovieModal;
