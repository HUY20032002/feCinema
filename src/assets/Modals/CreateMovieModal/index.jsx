import React, { useState, useEffect } from "react";
import { createMovie } from "../../../api/movieRequest";
import { useDispatch, useSelector } from "react-redux";
import Select from "react-select";
import { toast } from "react-toastify";
import { clearMessage } from "../../../redux/movieSlice";

function CreateMovieModal({ show, onClose, success }) {
  if (!show) return null;

  const dispatch = useDispatch();
  const { loading, error, message } = useSelector((state) => state.movie);

  const [selectedImage, setSelectedImage] = useState(null);
  const [selectedGenres, setSelectedGenres] = useState([]);
  const [formData, setFormData] = useState({
    img: "",
    name: "",
    description: "",
    genre: [],
    duration: "",
    subtitle: [],
    format: [],
    releaseDate: "",
    ageRating: "",
    trailerUrl: "",
  });

  const [errors, setErrors] = useState({});

  const formatOptions = ["2D", "3D", "IMAX"];
  const genres = [
    "H√†nh ƒê·ªông",
    "Ho·∫°t H√¨nh",
    "Kinh D·ªã",
    "Gia ƒê√¨nh",
    "H√¨nh S·ª±",
    "Chi·∫øn Tranh",
    "Bi K·ªãch",
    "C·ªï Trang",
    "Phi√™u L∆∞u",
    "Vi·ªÖn T∆∞·ªüng",
    "T√¨nh C·∫£m",
    "H√†i H∆∞·ªõc",
    "T√¢m L√Ω",
    "Th·ªÉ Thao",
    "√Çm Nh·∫°c",
    "Trinh Th√°m",
  ];
  const subtitleOptions = ["VietSub", "Thuy·∫øt Minh", "EngSub"];

  // Reset form khi ƒë√≥ng/m·ªü modal
  useEffect(() => {
    if (show) {
      resetForm();
    }
  }, [show]);

  // X·ª≠ l√Ω th√¥ng b√°o
  useEffect(() => {
    if (message) {
      if (error) {
        toast.error(message);
      } else {
        toast.success(message);
        if (message === "T·∫°o phim th√†nh c√¥ng") {
          setTimeout(() => {
            onClose();
            success();
          }, 1500);
        }
      }
      dispatch(clearMessage());
    }
  }, [message, error, dispatch, onClose, success]);

  const resetForm = () => {
    setFormData({
      img: "",
      name: "",
      description: "",
      genre: [],
      duration: "",
      subtitle: [],
      format: [],
      releaseDate: "",
      ageRating: "",
      trailerUrl: "",
    });
    setSelectedImage(null);
    setSelectedGenres([]);
    setErrors({});
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.name.trim()) newErrors.name = "T√™n phim l√† b·∫Øt bu·ªôc";
    if (!formData.duration) newErrors.duration = "Th·ªùi l∆∞·ª£ng l√† b·∫Øt bu·ªôc";
    if (formData.duration <= 0)
      newErrors.duration = "Th·ªùi l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0";
    if (!formData.releaseDate)
      newErrors.releaseDate = "Ng√†y ph√°t h√†nh l√† b·∫Øt bu·ªôc";
    if (!formData.img) newErrors.img = "·∫¢nh poster l√† b·∫Øt bu·ªôc";
    if (selectedGenres.length === 0)
      newErrors.genre = "Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 th·ªÉ lo·∫°i";
    if (formData.format.length === 0)
      newErrors.format = "Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 ƒë·ªãnh d·∫°ng";

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // üëâ ch·ªâ d√†nh cho input text/number
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));

    // Clear error khi user b·∫Øt ƒë·∫ßu nh·∫≠p
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: "" }));
    }
  };

  // üëâ d√†nh cho file ·∫£nh
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    // Validate file type
    if (!file.type.startsWith("image/")) {
      setErrors((prev) => ({ ...prev, img: "Vui l√≤ng ch·ªçn file ·∫£nh" }));
      return;
    }

    // Validate file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      setErrors((prev) => ({
        ...prev,
        img: "K√≠ch th∆∞·ªõc ·∫£nh kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5MB",
      }));
      return;
    }

    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onloadend = () => {
      setFormData((prev) => ({ ...prev, img: reader.result }));
      setSelectedImage(reader.result);
      if (errors.img) {
        setErrors((prev) => ({ ...prev, img: "" }));
      }
    };
  };

  // üëâ x·ª≠ l√Ω th·ªÉ lo·∫°i
  const handleGenreChange = (selected) => {
    const genreValues = selected.map((s) => s.value);
    setSelectedGenres(genreValues);
    setFormData((prev) => ({ ...prev, genre: genreValues }));

    if (errors.genre) {
      setErrors((prev) => ({ ...prev, genre: "" }));
    }
  };

  const handleFormatChange = (e) => {
    const { value, checked } = e.target;
    setFormData((prev) => {
      const newFormats = checked
        ? [...prev.format, value]
        : prev.format.filter((f) => f !== value);
      return { ...prev, format: newFormats };
    });

    if (errors.format) {
      setErrors((prev) => ({ ...prev, format: "" }));
    }
  };

  const handleSubtitleChange = (e) => {
    const { value, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      subtitle: checked
        ? [...prev.subtitle, value]
        : prev.subtitle.filter((s) => s !== value),
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      toast.error("Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin");
      return;
    }

    try {
      // Chu·∫©n b·ªã data g·ª≠i l√™n server
      const submitData = {
        ...formData,
        genre: selectedGenres,
        duration: parseInt(formData.duration),
        ageRating: formData.ageRating ? parseInt(formData.ageRating) : 0,
      };

      const result = await createMovie(dispatch, submitData);

      if (result.success) {
        // Th√†nh c√¥ng - s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong useEffect
      } else {
        toast.error(result.message || "T·∫°o phim th·∫•t b·∫°i");
      }
    } catch (error) {
      console.log("ER: ", error);
      toast.error("C√≥ l·ªói x·∫£y ra khi t·∫°o phim");
    }
  };

  const handleClose = () => {
    resetForm();
    onClose();
  };

  return (
    <div
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 p-4"
      role="dialog"
      aria-modal="true"
      onClick={handleClose}
    >
      <div
        className="relative w-full max-w-4xl max-h-[90vh] overflow-y-auto rounded-2xl bg-white shadow-2xl p-6 animate-fadeIn"
        onClick={(e) => e.stopPropagation()}
      >
        {/* N√∫t ƒë√≥ng ‚ùå */}
        <button
          onClick={handleClose}
          className="absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-2xl cursor-pointer z-10"
          disabled={loading}
        >
          &times;
        </button>

        <h2 className="text-2xl font-bold mb-6 text-center">Th√™m phim m·ªõi</h2>

        <form onSubmit={handleSubmit}>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* ·∫¢nh poster */}
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ·∫¢nh Poster *
                </label>
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleFileChange}
                  className="w-full p-2 border rounded"
                  disabled={loading}
                />
                {errors.img && (
                  <p className="text-red-500 text-sm mt-1">{errors.img}</p>
                )}
              </div>

              {selectedImage && (
                <div className="mt-4">
                  <img
                    src={selectedImage}
                    alt="preview"
                    className="w-full h-full object-cover rounded-lg border"
                  />
                </div>
              )}
            </div>

            {/* Th√¥ng tin phim */}
            <div className="space-y-4">
              {/* T√™n phim */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  T√™n Phim *
                </label>
                <input
                  type="text"
                  name="name"
                  className={`w-full p-2 border rounded ${
                    errors.name ? "border-red-500" : "border-gray-300"
                  }`}
                  value={formData.name}
                  onChange={handleInputChange}
                  disabled={loading}
                />
                {errors.name && (
                  <p className="text-red-500 text-sm mt-1">{errors.name}</p>
                )}
              </div>

              {/* M√¥ t·∫£ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  M√¥ t·∫£
                </label>
                <textarea
                  name="description"
                  rows="3"
                  className="w-full p-2 border border-gray-300 rounded"
                  value={formData.description}
                  onChange={handleInputChange}
                  disabled={loading}
                />
              </div>

              {/* Th·ªÉ lo·∫°i */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Th·ªÉ lo·∫°i *
                </label>
                <Select
                  isMulti
                  options={genres.map((g) => ({ value: g, label: g }))}
                  value={selectedGenres.map((g) => ({ value: g, label: g }))}
                  onChange={handleGenreChange}
                  className="w-full"
                  isDisabled={loading}
                />
                {errors.genre && (
                  <p className="text-red-500 text-sm mt-1">{errors.genre}</p>
                )}
              </div>

              {/* Th√¥ng tin ph·ª• */}
              <div className="grid grid-cols-2 gap-4">
                {/* ƒê·ªô tu·ªïi */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ƒê·ªô tu·ªïi
                  </label>
                  <div className="flex items-center">
                    <input
                      type="number"
                      name="ageRating"
                      value={formData.ageRating}
                      onChange={handleInputChange}
                      className="w-20 p-2 border border-gray-300 rounded"
                      min="0"
                      disabled={loading}
                    />
                    <span className="ml-2">+</span>
                  </div>
                </div>

                {/* Th·ªùi l∆∞·ª£ng */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Th·ªùi l∆∞·ª£ng (ph√∫t) *
                  </label>
                  <input
                    type="number"
                    name="duration"
                    value={formData.duration}
                    onChange={handleInputChange}
                    className={`w-full p-2 border rounded ${
                      errors.duration ? "border-red-500" : "border-gray-300"
                    }`}
                    min="1"
                    disabled={loading}
                  />
                  {errors.duration && (
                    <p className="text-red-500 text-sm mt-1">
                      {errors.duration}
                    </p>
                  )}
                </div>
              </div>

              {/* ƒê·ªãnh d·∫°ng */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ƒê·ªãnh d·∫°ng *
                </label>
                <div className="flex flex-wrap gap-4">
                  {formatOptions.map((item) => (
                    <label key={item} className="flex items-center gap-2">
                      <input
                        type="checkbox"
                        value={item}
                        checked={formData.format.includes(item)}
                        onChange={handleFormatChange}
                        disabled={loading}
                      />
                      {item}
                    </label>
                  ))}
                </div>
                {errors.format && (
                  <p className="text-red-500 text-sm mt-1">{errors.format}</p>
                )}
              </div>

              {/* Ph·ª• ƒë·ªÅ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ph·ª• ƒë·ªÅ
                </label>
                <div className="flex flex-wrap gap-4">
                  {subtitleOptions.map((item) => (
                    <label key={item} className="flex items-center gap-2">
                      <input
                        type="checkbox"
                        value={item}
                        checked={formData.subtitle.includes(item)}
                        onChange={handleSubtitleChange}
                        disabled={loading}
                      />
                      {item}
                    </label>
                  ))}
                </div>
              </div>

              {/* Ng√†y ph√°t h√†nh */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Ng√†y ph√°t h√†nh *
                </label>
                <input
                  type="date"
                  name="releaseDate"
                  value={formData.releaseDate}
                  onChange={handleInputChange}
                  className={`w-full p-2 border rounded ${
                    errors.releaseDate ? "border-red-500" : "border-gray-300"
                  }`}
                  disabled={loading}
                />
                {errors.releaseDate && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.releaseDate}
                  </p>
                )}
              </div>

              {/* Trailer */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Link Trailer
                </label>
                <input
                  type="text"
                  name="trailerUrl"
                  value={formData.trailerUrl}
                  onChange={handleInputChange}
                  className="w-full p-2 border border-gray-300 rounded"
                  placeholder="https://www.youtube.com/..."
                  disabled={loading}
                />
              </div>
            </div>
          </div>

          {/* Buttons */}
          <div className="flex flex-col md:flex-row justify-end gap-3 mt-6 pt-4 border-t">
            <button
              type="button"
              className="px-6 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors"
              onClick={handleClose}
              disabled={loading}
            >
              H·ªßy
            </button>
            <button
              type="submit"
              className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors flex items-center justify-center"
              disabled={loading}
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  ƒêang x·ª≠ l√Ω...
                </>
              ) : (
                "Th√™m phim"
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default CreateMovieModal;
