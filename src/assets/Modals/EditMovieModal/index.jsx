import React, { useState, useEffect } from "react";
import { updateMovie } from "../../../api/movieRequest";
import { useDispatch } from "react-redux";
import Select from "react-select";

function EditMovieModal({ show, movie, onClose, success }) {
  if (!show || !movie) return null;

  const formatOptions = ["2D", "3D", "IMAX"];
  const genres = [
    "H√†nh ƒê·ªông",
    "Ho·∫°t H√¨nh",
    "Kinh D·ªã",
    "Gia ƒê√¨nh",
    "H√¨nh S·ª±",
    "Chi·∫øn Tranh",
    "Bi K·ªãch",
    "C·ªï Trang",
    "Phi√™u L∆∞u",
    "Vi·ªÖn T∆∞·ªüng",
    "T√¨nh C·∫£m",
    "H√†i H∆∞·ªõc",
    "T√¢m L√Ω",
    "Th·ªÉ Thao",
    "√Çm Nh·∫°c",
    "Trinh Th√°m",
  ];
  const subtitleOptions = ["VietSub", "Thuy·∫øt Minh", "EngSub"];

  const dispatch = useDispatch();

  const [selectedGenres, setSelectedGenres] = useState([]);
  const [selectedSubtitles, setSelectedSubtitles] = useState([]);
  const [selectedFormats, setSelectedFormats] = useState([]);

  // State text
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [ageRating, setAgeRating] = useState("");
  const [releaseDate, setReleaseDate] = useState("");
  const [duration, setDuration] = useState("");
  const [trailerUrl, setTrailer] = useState("");
  const [bannerUrl, setBanner] = useState("");

  // Load data khi m·ªü modal
  useEffect(() => {
    if (movie) {
      setSelectedGenres(
        Array.isArray(movie.genre) ? movie.genre : [movie.genre]
      );
      setSelectedSubtitles(
        Array.isArray(movie.subtitle) ? movie.subtitle : [movie.subtitle]
      );
      setSelectedFormats(
        Array.isArray(movie.format) ? movie.format : [movie.format]
      );

      setName(movie.name || "");
      setDescription(movie.description || "");
      setAgeRating(movie.ageRating || "");
      setDuration(movie.duration || "");
      setTrailer(movie.trailerUrl || "");
      setBanner(movie.bannerUrl || "");
      setReleaseDate(
        movie.releaseDate
          ? new Date(movie.releaseDate).toISOString().split("T")[0]
          : ""
      );
    }
  }, [movie, show]);

  // Toggle checkboxes
  const handleToggle = (item, setSelected) => {
    setSelected((prev) =>
      prev.includes(item) ? prev.filter((i) => i !== item) : [...prev, item]
    );
  };

  // üëâ d√†nh cho file ·∫£nh
  const handleFileChange = (e) => {
    setBanner("");
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.readAsDataURL(file); // convert sang base64
    reader.onloadend = () => {
      setBanner(reader.result); // ‚úÖ th√™m d√≤ng n√†y ƒë·ªÉ hi·ªán preview
    };
  };
  // Submit c·∫≠p nh·∫≠t
  const handleSubmit = async () => {
    try {
      const updatedMovie = {
        ...movie,
        name,
        bannerUrl,
        description,
        ageRating,
        duration,
        trailerUrl,
        releaseDate,
        genre: selectedGenres,
        subtitle: selectedSubtitles,
        format: selectedFormats,
      };

      await updateMovie(dispatch, movie._id, updatedMovie);
      success();
      onClose();
    } catch (error) {
      console.log("ER: ", error);
    }
  };

  return (
    <div
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 p-4"
      onClick={onClose}
    >
      <div
        className="relative w-full max-w-5xl rounded-2xl bg-white shadow-2xl grid grid-cols-1 lg:grid-cols-2"
        onClick={(e) => e.stopPropagation()}
      >
        {/* N√∫t ƒë√≥ng */}
        <button
          onClick={onClose}
          className="absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-2xl"
        >
          &times;
        </button>

        {/* Poster */}
        <div className="h-[300px] lg:h-full">
          <img
            src={bannerUrl}
            alt={name}
            className="w-full h-full lg:h-full object-cover"
          />
        </div>

        {/* Form */}
        <div className="p-6 flex flex-col space-y-3 overflow-y-auto max-h-[90vh]">
          <input type="file" onChange={handleFileChange} />
          <label>T√™n Phim</label>
          <input
            type="text"
            className="border rounded-md p-2"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />

          <label className="block font-medium">M√¥ t·∫£</label>
          <textarea
            className="w-full border rounded-md p-2 text-gray-900"
            rows={4} // s·ªë d√≤ng m·∫∑c ƒë·ªãnh hi·ªÉn th·ªã
            value={description}
            defaultValue={movie.description}
            onChange={(e) => setDescription(e.target.value)}
          />

          {/* Th·ªÉ lo·∫°i */}
          <h2 className="text-base  font-bold">Ch·ªçn th·ªÉ lo·∫°i</h2>
          <Select
            isMulti
            options={genres.map((g) => ({ value: g, label: g }))}
            value={genres
              .map((g) => ({ value: g, label: g }))
              .filter((g) => selectedGenres.includes(g.value))}
            onChange={(selected) =>
              setSelectedGenres(selected.map((s) => s.value))
            }
            className="w-full"
          />

          {/* ƒê·ªô tu·ªïi + Th·ªùi l∆∞·ª£ng */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label>ƒê·ªô tu·ªïi:</label>
              <input
                type="number"
                className="border rounded-md p-2 w-full"
                value={ageRating}
                onChange={(e) => setAgeRating(e.target.value)}
              />
            </div>
            <div>
              <label>Th·ªùi l∆∞·ª£ng (ph√∫t):</label>
              <input
                type="number"
                className="border rounded-md p-2 w-full"
                value={duration}
                onChange={(e) => setDuration(e.target.value)}
              />
            </div>
          </div>
          <div className="grid grid-cols-2 gap-6">
            {/* ƒê·ªãnh d·∫°ng */}
            <div>
              <h4 className="text-base font-bold mb-2">Ch·ªçn ƒë·ªãnh d·∫°ng</h4>
              <div className="flex flex-wrap gap-4">
                {formatOptions.map((fmt) => (
                  <label key={fmt} className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={selectedFormats.includes(fmt)}
                      onChange={() => handleToggle(fmt, setSelectedFormats)}
                    />
                    {fmt}
                  </label>
                ))}
              </div>
            </div>

            {/* Ph·ª• ƒë·ªÅ */}
            <div>
              <h4 className="text-base font-bold mb-2">Ch·ªçn ph·ª• ƒë·ªÅ</h4>
              <div className="flex flex-wrap gap-4">
                {subtitleOptions.map((sub) => (
                  <label key={sub} className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={selectedSubtitles.includes(sub)}
                      onChange={() => handleToggle(sub, setSelectedSubtitles)}
                    />
                    {sub}
                  </label>
                ))}
              </div>
            </div>
          </div>
          <div className="grid grid-cols-2 gap-6">
            <div className="flex flex-col gap-1">
              <label className="font-medium">Ng√†y ph√°t h√†nh</label>
              <input
                type="date"
                className="border rounded-md p-2"
                value={releaseDate}
                onChange={(e) => setReleaseDate(e.target.value)}
              />
            </div>

            {/* Trailer */}
            <div className="flex flex-col gap-1">
              <label className="font-medium">Trailer</label>
              <input
                type="text"
                className="border rounded-md p-2"
                value={trailerUrl}
                onChange={(e) => setTrailer(e.target.value)}
              />
            </div>
          </div>
          {/* Ng√†y ph√°t h√†nh */}

          {/* Submit */}
          <button
            onClick={handleSubmit}
            className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
          >
            L∆∞u thay ƒë·ªïi
          </button>
        </div>
      </div>
    </div>
  );
}

export default EditMovieModal;
